const { Buffer } = require('buffer');
const { webcrypto } = require('crypto');

module.exports = {
  createIV: async () => {
    return webcrypto.getRandomValues(new Uint8Array(12));
  },
  createKeyAes: async () => {
    const key = await webcrypto.subtle.generateKey(
      {
        name: 'AES-GCM',
        length: 256,
      },
      true,
      ['encrypt', 'decrypt'],
    );
    const readKey = await webcrypto.subtle.exportKey('jwk', key);
    return readKey.k;
  },
  convertFileEncryptionKeyAesToObject: async (fileEncryptionKeyAesString) => {
    const kwtKey = { kty: 'oct', k: fileEncryptionKeyAesString, alg: 'A256GCM', ext: true };
    return await webcrypto.subtle.importKey(
      'jwk',
      kwtKey,
      {
        name: 'AES-GCM',
      },
      true,
      ['encrypt', 'decrypt'],
    );
  },
  encryptFileWithKeyAes: async (input, key, iv) => {
    try {
      const encryptedData = await webcrypto.subtle.encrypt(
        {
          name: 'AES-GCM',
          iv,
        },
        key,
        input,
      );
      const bufferData = Buffer.from(new Uint8Array(encryptedData));
      return bufferData;
    } catch (e) {
      throw new Error(`error encrypt file with key aes ${e}`);
    }
  },
  decryptDataByKeyAes: async (encryptedData, masterKey, iv) => {
    try {
      const decryptData = await webcrypto.subtle.decrypt(
        {
          name: 'AES-GCM',
          iv: Buffer.from(iv, 'hex'),
        },
        masterKey,
        encryptedData,
      );
      return decryptData;

    } catch (e) {
      throw new Error(`fail decrypt data ${e}`);
    }
  },
};

