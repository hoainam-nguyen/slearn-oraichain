const request = require('request');
const { signTypedData } = require('@metamask/eth-sig-util');
const { joinSignature } = require('@ethersproject/bytes');
const { Buffer } = require('buffer');
const { api } = require('./config');


module.exports = {
  requestSignUrl: async (opts, metadata) => {
    return new Promise((resolve) => {
      request(
        {
          method: 'POST',
          url: `${opts.endpoint}${api.requestUrlUpload}`,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            projectId: metadata.projectId,
            filename: metadata.filename,
            contentLength: metadata.contentLength,
            contentType: metadata.contentType,
            path: metadata.path,
            method: metadata.method,
            keepPath: metadata.keepPath,
            cidFile: metadata.cidFile,
            cidTorrentFile: metadata.cidTorrentFile,
            signData: opts.signData,
          }),
        },
        function(error, response) {
          if (error) throw new Error(error);
          resolve(JSON.parse(response.body));
        },
      );
    });
  },
  requestSignUrlList: async (opts, metadata) => {
    return new Promise((resolve) => {
      request(
        {
          method: 'POST',
          url: `${opts.endpoint}${api.requestUrlUploadList}`,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            projectId: metadata.projectId,
            signData: opts.signData,
            pathLists: metadata.pathLists,
          }),
        },
        function(error, response) {
          if (error) throw new Error(error);
          resolve(JSON.parse(response.body));
        },
      );
    });
  },
  signLogin: async (privateKey) => {
    try {
      const expireAt = Date.now() + 86400000;
      return {
        signature: signTypedData({
          privateKey: Buffer.from(privateKey, 'hex'),
          data: {
            message: {
              expireAt,
            },
            types: {
              EIP712Domain: [],
              Message: [{ name: 'expireAt', type: 'uint256' }],
            },
            primaryType: 'Message',
            domain: {},
          },
          version: 'V4',
        }),
        expireAt,
      };
    } catch (e) {
      throw new Error(`error when sign login`);
    }
  },
  convertSignToStringHex: (signature) => {
    const r = '0x' + Buffer.from(signature.r.data).toString('hex');
    const s = '0x' + Buffer.from(signature.s.data).toString('hex');
    const v = signature.v;
    return joinSignature({
      r,
      s,
      recoveryParam: v === 27 ? 0 : 1,
    });
  }
};
