/* eslint-disable no-restricted-syntax */
import { Buffer } from 'buffer';
import fs from 'fs/promises';
import Eueno from '../index';
import euenoSecret from '../secret-eueno.json';

describe('upload', () => {
  let euenoClient;
  beforeEach(() => {
    euenoClient = new Eueno({
      endpoint: '',
    });
  });
  describe('upload unencrypted file', () => {
    test('upload success', async () => {
      const file = await fs.readFile('./pexels-christian-heitz-842711.jpg');
      const keyAes = await euenoClient.genKeyAes();
      const uploadData = await euenoClient.upload(
        file,
        {
          bucketKey: euenoSecret.bucket_key,
          key: {
            publicKey: euenoSecret.public_key,
            k: keyAes,
          },
        },
        {
          contentLength: file.length,
          contentType: 'image/jpeg',
          filename: 'pexels-christian-heitz-842711.jpg',
          action: 'write',
          encryption: 'no',
        },
      );
    });
    test('upload success when uploader is not owner of bucket', async () => {
      const file = await fs.readFile('./image2.jpg');
      const keyAes = await euenoClient.genKeyAes();
      const data = await euenoClient.genPkAndSk();
      const uploadData = await euenoClient.upload(
        file,
        {
          bucketKey: euenoSecret.bucket_key,
          key: {
            publicKey: data.pk,
            k: keyAes,
          },
        },
        {
          contentLength: file.length,
          contentType: 'image/jpeg',
          filename: 'image2.jpg',
          action: 'write',
          encryption: 'no',
        },
      );
    });
    test('upload fail with unidentified bucket key', async () => {
      const file = await fs.readFile('./pexels-christian-heitz-842711.jpg');
      const keyAes = await euenoClient.genKeyAes();
      await expect(
        euenoClient.upload(
          file,
          {
            bucketKey: euenoSecret.bucket_key_case_fail,
            key: {
              publicKey: euenoSecret.public_key,
              k: keyAes,
            },
          },
          {
            contentLength: 2612182,
            contentType: 'image/jpeg',
            filename: 'pexels-christian-heitz-842711.jpg',
            action: 'write',
            encryption: 'no',
          },
        ),
      ).rejects.toThrow('error request sign {"status":403,"message":"No token provided"}');
    });
  });
  describe('upload encrypted file', () => {
    test('upload encrypted file', async () => {
      const file = Buffer.from('123');
      const keyAes = await euenoClient.genKeyAes();
      const uploadData = await euenoClient.upload(
        file,
        {
          bucketKey: euenoSecret.bucket_key,
          key: {
            publicKey: euenoSecret.public_key,
            k: keyAes,
          },
        },
        {
          contentLength: file.length,
          contentType: 'image/jpeg',
          filename: 'image2.jpg',
          action: 'write',
          encryption: 'yes',
        },
      );
      const decryptData = await euenoClient.decrypt(uploadData.dataEncrypt, {
        encryptKey: uploadData.encryptKey,
        sk: euenoSecret.secret_key,
      });
      expect(Buffer.from(decryptData).toJSON()).toEqual(Buffer.from(file).toJSON());
    });
  });
  describe('upload folder', () => {
    test('upload success', async () => {
      jest.setTimeout(60000);
      const keyAes = await euenoClient.genKeyAes();
      const filesInfo = euenoClient.readFolder('./images');
      await euenoClient.uploadFolder(
        filesInfo.input,
        {
          projectKey: euenoSecret.project_key,
          key: {
            publicKey: euenoSecret.public_key,
            k: keyAes,
          },
        },
        {
          pathLists: filesInfo.pathLists,
          projectId: euenoSecret.project_id,
        },
      );
    });
    test('upload encrypted folder success', async () => {
      const keyAes = await euenoClient.genKeyAes();
      const filesInfo = euenoClient.readFolder('./images');
      filesInfo.pathLists[1].method = 'ENCRYPT';
      await euenoClient.uploadFolder(
        filesInfo.input,
        {
          projectKey: euenoSecret.project_key,
          key: {
            publicKey: euenoSecret.public_key,
            k: keyAes,
          },
        },
        {
          pathLists: filesInfo.pathLists,
          projectId: euenoSecret.project_id,
        },
      );
    });
    test('upload folder using batch upload', async () => {
      const keyAes = await euenoClient.genKeyAes();
      const filesInfo = {};
      filesInfo.input = [];
      filesInfo.pathLists = [];
      for (let i = 0; i < 200; i++) {
        const fileData = await fs.readFile(`./image2.jpg`);
        fileData.name = `${i}.jpg`;
        filesInfo.input.push(fileData);
        filesInfo.pathLists.push({
          path: `test-upload-by-batch`,
          filename: `${i}.jpg`,
          contentLength: fileData.length,
          contentType: 'image/jpeg',
          method: 'UNENCRYPTED',
        });
      }
      const uploadData = await euenoClient.uploadFolder(
        filesInfo.input,
        {
          projectKey: euenoSecret.project_key,
          key: {
            publicKey: euenoSecret.public_key,
            k: keyAes,
          },
        },
        {
          pathLists: filesInfo.pathLists,
          projectId: euenoSecret.project_id,
        },
      );
      expect(uploadData.length).toBe(200);
    });
  });
});
