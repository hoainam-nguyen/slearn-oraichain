"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var eccrypto = require('eccrypto');
var _require = require('crypto'),
  webcrypto = _require.webcrypto;
var _require2 = require('buffer'),
  Buffer = _require2.Buffer;
var fs = require('fs');
var path = require('path');
var mime = require('mime-types');
var _require3 = require('./src/config'),
  announceList = _require3.announceList,
  ipfsGateway = _require3.ipfsGateway;
var _require4 = require('./src/sign'),
  signLogin = _require4.signLogin,
  requestSignUrl = _require4.requestSignUrl,
  requestSignUrlList = _require4.requestSignUrlList,
  convertSignToStringHex = _require4.convertSignToStringHex;
var _require5 = require('./src/uploadFile'),
  uploadFile = _require5.uploadFile;
var _require6 = require('./src/uploadFileTorrent'),
  uploadFileTorrent = _require6.uploadFileTorrent;
var _require7 = require('./src/seed'),
  createTorrentFile = _require7.createTorrentFile;
var _require8 = require('./src/uploadKeyEncrypt'),
  uploadKeyEncrypt = _require8.uploadKeyEncrypt;
var _require9 = require('./src/ecdsa'),
  decryptGetKeyAes = _require9.decryptGetKeyAes,
  convertWalletPublicKeyToAddress = _require9.convertWalletPublicKeyToAddress,
  encryptKeyAesByWalletPublicKey = _require9.encryptKeyAesByWalletPublicKey,
  _createWallet = _require9.createWallet,
  _createPublicKeyFromPrivateKeyWallet = _require9.createPublicKeyFromPrivateKeyWallet;
var _require10 = require('./src/aes'),
  _createKeyAes = _require10.createKeyAes,
  convertFileEncryptionKeyAesToObject = _require10.convertFileEncryptionKeyAesToObject,
  createIV = _require10.createIV,
  encryptFileWithKeyAes = _require10.encryptFileWithKeyAes,
  _decryptDataByKeyAes = _require10.decryptDataByKeyAes;
var _require11 = require('./src/user'),
  callCreateAccount = _require11.callCreateAccount;
var _require12 = require('./src/ipfs'),
  hashIpfs = _require12.hashIpfs;
var _require13 = require('./src/file'),
  callGetObjectLists = _require13.callGetObjectLists,
  callGetObjectDetail = _require13.callGetObjectDetail,
  callDeleteFile = _require13.callDeleteFile,
  callGetSharedFiles = _require13.callGetSharedFiles,
  callCreateFolder = _require13.callCreateFolder;
var _require14 = require('./src/shareTo'),
  _shareTo = _require14.shareTo;
var _require15 = require('./src/project'),
  callCreateProject = _require15.callCreateProject,
  callGetPersonalProject = _require15.callGetPersonalProject;
var Eueno = /*#__PURE__*/function () {
  function Eueno() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Eueno);
    if (opts.endpoint === undefined) {
      throw new Error('end point invalid');
    }
    this.endpoint = opts.endpoint;
    if (opts.ipfsGateway !== undefined) {
      this.ipfsGateway = opts.ipfsGateway + '/ipfs';
    } else {
      this.ipfsGateway = ipfsGateway + '/ipfs';
    }
  }

  // SERVICE EUENO
  _createClass(Eueno, [{
    key: "getObjectDetail",
    value: function () {
      var _getObjectDetail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(opts) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(opts.fileId === undefined)) {
                _context.next = 2;
                break;
              }
              throw new Error('fileId invalid');
            case 2:
              opts.endpoint = this.endpoint;
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context.next = 5;
                break;
              }
              throw new Error('Authentication invalid');
            case 5:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (opts.signData) {
                _context.next = 10;
                break;
              }
              _context.next = 9;
              return signLogin(opts.projectKey);
            case 9:
              opts.signData = _context.sent;
            case 10:
              return _context.abrupt("return", callGetObjectDetail(opts));
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getObjectDetail(_x) {
        return _getObjectDetail.apply(this, arguments);
      }
      return getObjectDetail;
    }()
  }, {
    key: "getObjectLists",
    value: function () {
      var _getObjectLists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(opts) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (opts.path !== undefined) {
                opts.params = "folderPath=".concat(opts.path);
              } else {
                opts.params = '';
              }
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context2.next = 3;
                break;
              }
              throw new Error('Authentication invalid');
            case 3:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (!(opts.projectId === undefined)) {
                _context2.next = 6;
                break;
              }
              throw new Error('projectId invalid');
            case 6:
              if (opts.signData) {
                _context2.next = 10;
                break;
              }
              _context2.next = 9;
              return signLogin(opts.projectKey);
            case 9:
              opts.signData = _context2.sent;
            case 10:
              opts.endpoint = this.endpoint;
              return _context2.abrupt("return", callGetObjectLists(opts));
            case 12:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getObjectLists(_x2) {
        return _getObjectLists.apply(this, arguments);
      }
      return getObjectLists;
    }()
  }, {
    key: "deleteObject",
    value: function () {
      var _deleteObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(opts) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(opts.fileId === undefined)) {
                _context3.next = 2;
                break;
              }
              throw new Error('fileId invalid');
            case 2:
              opts.endpoint = this.endpoint;
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context3.next = 5;
                break;
              }
              throw new Error('Authentication invalid');
            case 5:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (opts.signData) {
                _context3.next = 10;
                break;
              }
              _context3.next = 9;
              return signLogin(opts.projectKey);
            case 9:
              opts.signData = _context3.sent;
            case 10:
              return _context3.abrupt("return", callDeleteFile(opts));
            case 11:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function deleteObject(_x3) {
        return _deleteObject.apply(this, arguments);
      }
      return deleteObject;
    }()
  }, {
    key: "shareTo",
    value: function () {
      var _shareTo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(opts) {
        var file, fileEncryptionKey;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(opts.fileId === undefined)) {
                _context4.next = 2;
                break;
              }
              throw new Error('fileId invalid');
            case 2:
              if (!(opts.projectId === undefined)) {
                _context4.next = 4;
                break;
              }
              throw new Error('projectId invalid');
            case 4:
              opts.endpoint = this.endpoint;
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context4.next = 7;
                break;
              }
              throw new Error('Authentication invalid');
            case 7:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              _context4.next = 10;
              return this.getObjectDetail(opts);
            case 10:
              file = _context4.sent;
              if (!(file.code === 404)) {
                _context4.next = 13;
                break;
              }
              return _context4.abrupt("return", file);
            case 13:
              if (!(file.data.method === 'ENCRYPT')) {
                _context4.next = 29;
                break;
              }
              if (!(opts.walletPrivateKey === undefined)) {
                _context4.next = 16;
                break;
              }
              throw new Error('walletPrivateKey invalid');
            case 16:
              if (!(opts.walletPublicKeyShare === undefined)) {
                _context4.next = 18;
                break;
              }
              throw new Error('walletPublicKeyShare invalid');
            case 18:
              if (!(file.data.encryptKey === undefined)) {
                _context4.next = 20;
                break;
              }
              return _context4.abrupt("return", {
                code: 404,
                msg: 'key encrypt file not found',
                file: file.data
              });
            case 20:
              _context4.next = 22;
              return decryptGetKeyAes(file.data.encryptKey, opts.walletPrivateKey);
            case 22:
              fileEncryptionKey = _context4.sent;
              _context4.next = 25;
              return convertWalletPublicKeyToAddress(opts.walletPublicKeyShare);
            case 25:
              opts.addressShare = _context4.sent;
              _context4.next = 28;
              return encryptKeyAesByWalletPublicKey(fileEncryptionKey.key, fileEncryptionKey.iv, opts.walletPublicKeyShare);
            case 28:
              opts.encryptedKeyShare = _context4.sent;
            case 29:
              return _context4.abrupt("return", _shareTo(opts));
            case 30:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function shareTo(_x4) {
        return _shareTo2.apply(this, arguments);
      }
      return shareTo;
    }()
  }, {
    key: "upload",
    value: function () {
      var _upload2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(input, opts, metadata) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(metadata.contentLength === undefined)) {
                _context5.next = 2;
                break;
              }
              throw new Error('contentLength invalid');
            case 2:
              if (!(metadata.contentType === undefined)) {
                _context5.next = 4;
                break;
              }
              throw new Error('contentType invalid');
            case 4:
              if (!(metadata.filename === undefined)) {
                _context5.next = 6;
                break;
              }
              throw new Error('filename invalid');
            case 6:
              if (!(metadata.method !== 'ENCRYPT' && metadata.method !== 'UNENCRYPTED')) {
                _context5.next = 8;
                break;
              }
              throw new Error('method invalid');
            case 8:
              if (!(metadata.method === 'ENCRYPT')) {
                _context5.next = 15;
                break;
              }
              if (!(opts.key.walletPublicKey === undefined)) {
                _context5.next = 11;
                break;
              }
              throw new Error('walletPublicKey invalid');
            case 11:
              if (!(opts.key.fileEncryptionKey === undefined)) {
                _context5.next = 15;
                break;
              }
              _context5.next = 14;
              return _createKeyAes();
            case 14:
              opts.key.fileEncryptionKey = _context5.sent;
            case 15:
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context5.next = 17;
                break;
              }
              throw new Error('Authentication invalid');
            case 17:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              opts.endpoint = this.endpoint;
              opts.ipfsGateway = this.ipfsGateway;
              return _context5.abrupt("return", _prepareFile(input, opts, metadata));
            case 21:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function upload(_x5, _x6, _x7) {
        return _upload2.apply(this, arguments);
      }
      return upload;
    }()
  }, {
    key: "readFolder",
    value: function () {
      var _readFolder2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(folderPath) {
        var filesInFolder, folderName;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              filesInFolder = fs.readdirSync(folderPath);
              folderName = path.basename(folderPath);
              return _context6.abrupt("return", _readFolder(filesInFolder, folderName));
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function readFolder(_x8) {
        return _readFolder2.apply(this, arguments);
      }
      return readFolder;
    }()
  }, {
    key: "uploadFolder",
    value: function () {
      var _uploadFolder2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(input, opts, metadata) {
        var _iterator, _step, fileMetadata;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context7.next = 2;
                break;
              }
              throw new Error('Authentication invalid');
            case 2:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (!(metadata.projectId === undefined)) {
                _context7.next = 5;
                break;
              }
              throw new Error('Project ID invalid');
            case 5:
              _iterator = _createForOfIteratorHelper(metadata.pathLists);
              _context7.prev = 6;
              _iterator.s();
            case 8:
              if ((_step = _iterator.n()).done) {
                _context7.next = 27;
                break;
              }
              fileMetadata = _step.value;
              if (!(fileMetadata.filename === undefined)) {
                _context7.next = 12;
                break;
              }
              throw new Error('filename invalid');
            case 12:
              if (!(fileMetadata.contentType === undefined)) {
                _context7.next = 14;
                break;
              }
              throw new Error('contentType invalid');
            case 14:
              if (!(fileMetadata.contentLength === undefined)) {
                _context7.next = 16;
                break;
              }
              throw new Error('contentLength invalid');
            case 16:
              if (!(fileMetadata.method !== 'ENCRYPT' && fileMetadata.method !== 'UNENCRYPTED')) {
                _context7.next = 18;
                break;
              }
              throw new Error('method invalid');
            case 18:
              if (!(fileMetadata.method === 'ENCRYPT')) {
                _context7.next = 25;
                break;
              }
              if (!(opts.key.walletPublicKey === undefined)) {
                _context7.next = 21;
                break;
              }
              throw new Error('walletPublicKey invalid');
            case 21:
              if (!(opts.key.fileEncryptionKey === undefined)) {
                _context7.next = 25;
                break;
              }
              _context7.next = 24;
              return _createKeyAes();
            case 24:
              opts.key.fileEncryptionKey = _context7.sent;
            case 25:
              _context7.next = 8;
              break;
            case 27:
              _context7.next = 32;
              break;
            case 29:
              _context7.prev = 29;
              _context7.t0 = _context7["catch"](6);
              _iterator.e(_context7.t0);
            case 32:
              _context7.prev = 32;
              _iterator.f();
              return _context7.finish(32);
            case 35:
              if (opts.signData) {
                _context7.next = 39;
                break;
              }
              _context7.next = 38;
              return signLogin(opts.projectKey);
            case 38:
              opts.signData = _context7.sent;
            case 39:
              opts.endpoint = this.endpoint;
              opts.ipfsGateway = this.ipfsGateway;
              return _context7.abrupt("return", _prepareFolder(input, opts, metadata));
            case 42:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this, [[6, 29, 32, 35]]);
      }));
      function uploadFolder(_x9, _x10, _x11) {
        return _uploadFolder2.apply(this, arguments);
      }
      return uploadFolder;
    }()
  }, {
    key: "createFolder",
    value: function () {
      var _createFolder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(opts) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context8.next = 2;
                break;
              }
              throw new Error('Authentication invalid');
            case 2:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (!(opts.path === undefined)) {
                _context8.next = 5;
                break;
              }
              throw new Error('path invalid');
            case 5:
              if (opts.signData) {
                _context8.next = 9;
                break;
              }
              _context8.next = 8;
              return signLogin(opts.projectKey);
            case 8:
              opts.signData = _context8.sent;
            case 9:
              opts.endpoint = this.endpoint;
              return _context8.abrupt("return", callCreateFolder(opts));
            case 11:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function createFolder(_x12) {
        return _createFolder.apply(this, arguments);
      }
      return createFolder;
    }()
  }, {
    key: "createAccount",
    value: function () {
      var _createAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(opts) {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(opts.projectKey === undefined && opts.signData === undefined)) {
                _context9.next = 2;
                break;
              }
              throw new Error('Authentication invalid');
            case 2:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (!(opts.account === undefined)) {
                _context9.next = 5;
                break;
              }
              throw new Error('account invalid');
            case 5:
              if (opts.signData) {
                _context9.next = 9;
                break;
              }
              _context9.next = 8;
              return signLogin(opts.projectKey);
            case 8:
              opts.signData = _context9.sent;
            case 9:
              opts.endpoint = this.endpoint;
              return _context9.abrupt("return", callCreateAccount(opts));
            case 11:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function createAccount(_x13) {
        return _createAccount.apply(this, arguments);
      }
      return createAccount;
    }() //KEY
  }, {
    key: "createKeyAes",
    value: function () {
      var _createKeyAes2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", _createKeyAes());
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function createKeyAes() {
        return _createKeyAes2.apply(this, arguments);
      }
      return createKeyAes;
    }()
  }, {
    key: "createWallet",
    value: function () {
      var _createWallet2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", _createWallet());
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function createWallet() {
        return _createWallet2.apply(this, arguments);
      }
      return createWallet;
    }()
  }, {
    key: "createPublicKeyFromPrivateKeyWallet",
    value: function () {
      var _createPublicKeyFromPrivateKeyWallet2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(walletPrivateKey) {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", _createPublicKeyFromPrivateKeyWallet(walletPrivateKey));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function createPublicKeyFromPrivateKeyWallet(_x14) {
        return _createPublicKeyFromPrivateKeyWallet2.apply(this, arguments);
      }
      return createPublicKeyFromPrivateKeyWallet;
    }()
  }, {
    key: "decryptDataByKeyAes",
    value: function () {
      var _decryptDataByKeyAes2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(input, fileEncryptionKey, iv) {
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!(typeof input === 'string')) {
                _context13.next = 2;
                break;
              }
              throw new Error('input only buffer file');
            case 2:
              if (!(typeof fileEncryptionKey !== 'string')) {
                _context13.next = 4;
                break;
              }
              throw new Error('fileEncryptionKey must string');
            case 4:
              _context13.next = 6;
              return convertFileEncryptionKeyAesToObject(fileEncryptionKey);
            case 6:
              fileEncryptionKey = _context13.sent;
              return _context13.abrupt("return", _decryptDataByKeyAes(input, fileEncryptionKey, iv));
            case 8:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function decryptDataByKeyAes(_x15, _x16, _x17) {
        return _decryptDataByKeyAes2.apply(this, arguments);
      }
      return decryptDataByKeyAes;
    }()
  }, {
    key: "decryptGetKeyAesWithPriKeyWallet",
    value: function () {
      var _decryptGetKeyAesWithPriKeyWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(input, walletPrivateKey) {
        var decrypt;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              if (!(typeof walletPrivateKey !== 'string')) {
                _context14.next = 2;
                break;
              }
              throw new Error('walletPrivateKey must string');
            case 2:
              _context14.next = 4;
              return decryptGetKeyAes(input, walletPrivateKey);
            case 4:
              decrypt = _context14.sent;
              _context14.next = 7;
              return webcrypto.subtle.exportKey('jwk', decrypt.key);
            case 7:
              _context14.t0 = _context14.sent.k;
              _context14.t1 = decrypt.iv;
              return _context14.abrupt("return", {
                fileEncryptionKey: _context14.t0,
                iv: _context14.t1
              });
            case 10:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function decryptGetKeyAesWithPriKeyWallet(_x18, _x19) {
        return _decryptGetKeyAesWithPriKeyWallet.apply(this, arguments);
      }
      return decryptGetKeyAesWithPriKeyWallet;
    }()
  }, {
    key: "getSharedFiles",
    value: function () {
      var _getSharedFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(opts) {
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(opts.walletPrivateKey === undefined && opts.signData === undefined)) {
                _context15.next = 2;
                break;
              }
              throw new Error('Authentication invalid');
            case 2:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (!(opts.projectId === undefined)) {
                _context15.next = 5;
                break;
              }
              throw new Error('Project ID invalid');
            case 5:
              if (opts.signData) {
                _context15.next = 11;
                break;
              }
              if (!(typeof opts.walletPrivateKey !== 'string')) {
                _context15.next = 8;
                break;
              }
              throw new Error('walletPrivateKey must string');
            case 8:
              _context15.next = 10;
              return signLogin(opts.walletPrivateKey);
            case 10:
              opts.signData = _context15.sent;
            case 11:
              if (opts.page === undefined) {
                opts.page = 1;
              }
              if (opts.limit === undefined) {
                opts.limit = 10;
              }
              opts.endpoint = this.endpoint;
              return _context15.abrupt("return", callGetSharedFiles(opts));
            case 15:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getSharedFiles(_x20) {
        return _getSharedFiles.apply(this, arguments);
      }
      return getSharedFiles;
    }()
  }, {
    key: "createProject",
    value: function () {
      var _createProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(opts) {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!(opts.walletPrivateKey === undefined && opts.signData === undefined)) {
                _context16.next = 2;
                break;
              }
              throw new Error('Authentication invalid');
            case 2:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (!(opts.projectName === undefined)) {
                _context16.next = 5;
                break;
              }
              throw new Error('projectName invalid');
            case 5:
              if (!(typeof opts.projectName !== 'string')) {
                _context16.next = 7;
                break;
              }
              throw new Error('projectName must string');
            case 7:
              if (opts.signData) {
                _context16.next = 13;
                break;
              }
              if (!(typeof opts.walletPrivateKey !== 'string')) {
                _context16.next = 10;
                break;
              }
              throw new Error('walletPrivateKey must string');
            case 10:
              _context16.next = 12;
              return signLogin(opts.walletPrivateKey);
            case 12:
              opts.signData = _context16.sent;
            case 13:
              opts.endpoint = this.endpoint;
              return _context16.abrupt("return", callCreateProject(opts));
            case 15:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function createProject(_x21) {
        return _createProject.apply(this, arguments);
      }
      return createProject;
    }()
  }, {
    key: "getPersonalProject",
    value: function () {
      var _getPersonalProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(opts) {
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              if (!(opts.walletPrivateKey === undefined && opts.signData === undefined)) {
                _context17.next = 2;
                break;
              }
              throw new Error('Authentication invalid');
            case 2:
              if (opts.signData && _typeof(opts.signData.signature) === 'object') {
                opts.signData.signature = convertSignToStringHex(opts.signData.signature);
              }
              if (opts.page === undefined) {
                opts.page = 1;
              }
              if (opts.limit === undefined) {
                opts.limit = 100;
              }
              if (opts.sortBy === undefined) {
                opts.sortBy = 'id:asc';
              }
              if (opts.signData) {
                _context17.next = 12;
                break;
              }
              if (!(typeof opts.walletPrivateKey !== 'string')) {
                _context17.next = 9;
                break;
              }
              throw new Error('walletPrivateKey must string');
            case 9:
              _context17.next = 11;
              return signLogin(opts.walletPrivateKey);
            case 11:
              opts.signData = _context17.sent;
            case 12:
              opts.endpoint = this.endpoint;
              return _context17.abrupt("return", callGetPersonalProject(opts));
            case 14:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getPersonalProject(_x22) {
        return _getPersonalProject.apply(this, arguments);
      }
      return getPersonalProject;
    }()
  }]);
  return Eueno;
}();
var _readFolder = function _readFolder(filesInFolder, folderName) {
  var filesInBuffer = [];
  var filesMetadata = [];
  var _iterator2 = _createForOfIteratorHelper(filesInFolder),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var filename = _step2.value;
      var _path = "./".concat(folderName, "/");
      var fileInfo = fs.lstatSync("".concat(_path).concat(filename));
      if (!fileInfo.isDirectory()) {
        var fileData = fs.readFileSync("".concat(_path).concat(filename));
        fileData.name = filename;
        filesInBuffer.push(fileData);
        filesMetadata.push({
          path: "".concat(folderName),
          filename: filename,
          contentLength: fileData.length,
          contentType: mime.lookup(filename),
          method: 'UNENCRYPTED'
        });
      } else {
        var subFolder = fs.readdirSync("".concat(folderName, "/").concat(filename));
        var subFiles = _readFolder(subFolder, "".concat(folderName, "/").concat(filename));
        filesInBuffer = [].concat(_toConsumableArray(filesInBuffer), _toConsumableArray(subFiles.input));
        filesMetadata = [].concat(_toConsumableArray(filesMetadata), _toConsumableArray(subFiles.pathLists));
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return {
    input: filesInBuffer,
    pathLists: filesMetadata
  };
};
var _prepareFile = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(input, opts, metadata) {
    var _yield$Promise$all, _yield$Promise$all2, keyConvert, iv, _yield$Promise$all3, _yield$Promise$all4, encryptedFileData, encryptedKey;
    return _regeneratorRuntime().wrap(function _callee18$(_context18) {
      while (1) switch (_context18.prev = _context18.next) {
        case 0:
          if (!(typeof input === 'string')) {
            _context18.next = 2;
            break;
          }
          throw new Error('input only buffer file');
        case 2:
          if (!(metadata.method === 'ENCRYPT')) {
            _context18.next = 34;
            break;
          }
          _context18.t0 = Promise;
          _context18.next = 6;
          return convertFileEncryptionKeyAesToObject(opts.key.fileEncryptionKey);
        case 6:
          _context18.t1 = _context18.sent;
          _context18.next = 9;
          return createIV();
        case 9:
          _context18.t2 = _context18.sent;
          _context18.t3 = [_context18.t1, _context18.t2];
          _context18.next = 13;
          return _context18.t0.all.call(_context18.t0, _context18.t3);
        case 13:
          _yield$Promise$all = _context18.sent;
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
          keyConvert = _yield$Promise$all2[0];
          iv = _yield$Promise$all2[1];
          _context18.t4 = Promise;
          _context18.next = 20;
          return encryptFileWithKeyAes(input, keyConvert, iv);
        case 20:
          _context18.t5 = _context18.sent;
          _context18.next = 23;
          return encryptKeyAesByWalletPublicKey(keyConvert, iv, opts.key.walletPublicKey);
        case 23:
          _context18.t6 = _context18.sent;
          _context18.t7 = [_context18.t5, _context18.t6];
          _context18.next = 27;
          return _context18.t4.all.call(_context18.t4, _context18.t7);
        case 27:
          _yield$Promise$all3 = _context18.sent;
          _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);
          encryptedFileData = _yield$Promise$all4[0];
          encryptedKey = _yield$Promise$all4[1];
          input = encryptedFileData;
          opts.key.encryptedKey = encryptedKey;
          opts.key.iv = Buffer.from(iv).toString('hex');
        case 34:
          return _context18.abrupt("return", _upload(input, opts, metadata));
        case 35:
        case "end":
          return _context18.stop();
      }
    }, _callee18);
  }));
  return function _prepareFile(_x23, _x24, _x25) {
    return _ref.apply(this, arguments);
  };
}();
var _prepareFolder = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(input, opts, metadata) {
    var limitNumberOfFilesEachBatch, filteredInput, iv, keyConvert, _i2, _yield$Promise$all5, _yield$Promise$all6, encryptedFileData, fileName, result, i, subInput, subMetadata, subResult;
    return _regeneratorRuntime().wrap(function _callee19$(_context19) {
      while (1) switch (_context19.prev = _context19.next) {
        case 0:
          limitNumberOfFilesEachBatch = 100;
          if (!Object.values(input).every(function (el) {
            return typeof el === 'string';
          })) {
            _context19.next = 3;
            break;
          }
          throw new Error('input only buffer file');
        case 3:
          filteredInput = input.filter(function (el) {
            return el.name !== '.DS_Store';
          });
          metadata.pathLists = metadata.pathLists.filter(function (el) {
            return el.filename !== '.DS_Store';
          });
          _i2 = 0;
        case 6:
          if (!(_i2 < filteredInput.length)) {
            _context19.next = 36;
            break;
          }
          if (!(metadata.pathLists[_i2].method === 'ENCRYPT')) {
            _context19.next = 33;
            break;
          }
          if (opts.key._k) {
            _context19.next = 27;
            break;
          }
          _context19.t0 = Promise;
          _context19.next = 12;
          return convertFileEncryptionKeyAesToObject(opts.key.fileEncryptionKey);
        case 12:
          _context19.t1 = _context19.sent;
          _context19.next = 15;
          return createIV();
        case 15:
          _context19.t2 = _context19.sent;
          _context19.t3 = [_context19.t1, _context19.t2];
          _context19.next = 19;
          return _context19.t0.all.call(_context19.t0, _context19.t3);
        case 19:
          _yield$Promise$all5 = _context19.sent;
          _yield$Promise$all6 = _slicedToArray(_yield$Promise$all5, 2);
          keyConvert = _yield$Promise$all6[0];
          iv = _yield$Promise$all6[1];
          opts.key.iv = Buffer.from(iv).toString('hex');
          _context19.next = 26;
          return encryptKeyAesByWalletPublicKey(keyConvert, iv, opts.key.walletPublicKey);
        case 26:
          opts.key.encryptedKey = _context19.sent;
        case 27:
          _context19.next = 29;
          return encryptFileWithKeyAes(filteredInput[_i2], keyConvert, iv);
        case 29:
          encryptedFileData = _context19.sent;
          fileName = filteredInput[_i2].name;
          filteredInput[_i2] = encryptedFileData;
          filteredInput[_i2].name = fileName;
        case 33:
          _i2++;
          _context19.next = 6;
          break;
        case 36:
          if (!(filteredInput.length <= limitNumberOfFilesEachBatch)) {
            _context19.next = 38;
            break;
          }
          return _context19.abrupt("return", _uploadFolder(filteredInput, opts, metadata));
        case 38:
          // process upload by batch
          result = [];
          i = 0;
        case 40:
          if (!true) {
            _context19.next = 52;
            break;
          }
          subInput = filteredInput.slice(i, i + limitNumberOfFilesEachBatch);
          subMetadata = {
            projectId: metadata.projectId,
            pathLists: metadata.pathLists.slice(i, i + limitNumberOfFilesEachBatch)
          };
          _context19.next = 45;
          return _uploadFolder(subInput, opts, subMetadata);
        case 45:
          subResult = _context19.sent;
          result = [].concat(_toConsumableArray(result), _toConsumableArray(subResult));
          if (!(i + limitNumberOfFilesEachBatch >= filteredInput.length)) {
            _context19.next = 49;
            break;
          }
          return _context19.abrupt("break", 52);
        case 49:
          i += limitNumberOfFilesEachBatch;
          _context19.next = 40;
          break;
        case 52:
          return _context19.abrupt("return", result);
        case 53:
        case "end":
          return _context19.stop();
      }
    }, _callee19);
  }));
  return function _prepareFolder(_x26, _x27, _x28) {
    return _ref2.apply(this, arguments);
  };
}();
var _upload = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(input, opts, metadata) {
    var cidFile, torrent, cidTorrent, signUrl, _yield$Promise$all7, _yield$Promise$all8, a, b, result;
    return _regeneratorRuntime().wrap(function _callee21$(_context21) {
      while (1) switch (_context21.prev = _context21.next) {
        case 0:
          if (opts.signData) {
            _context21.next = 4;
            break;
          }
          _context21.next = 3;
          return signLogin(opts.projectKey);
        case 3:
          opts.signData = _context21.sent;
        case 4:
          _context21.next = 6;
          return hashIpfs(input);
        case 6:
          cidFile = _context21.sent;
          _context21.next = 9;
          return _getOpts(opts);
        case 9:
          opts = _context21.sent;
          opts.urlList = ["".concat(opts.ipfsGateway, "/").concat(cidFile)];
          _context21.next = 13;
          return createTorrentFile(input, opts);
        case 13:
          torrent = _context21.sent;
          _context21.next = 16;
          return hashIpfs(torrent);
        case 16:
          cidTorrent = _context21.sent;
          metadata.cidFile = cidFile;
          metadata.cidTorrentFile = cidTorrent;
          _context21.next = 21;
          return requestSignUrl(opts, metadata);
        case 21:
          signUrl = _context21.sent;
          if (!(signUrl.status !== 200)) {
            _context21.next = 26;
            break;
          }
          throw new Error("error request sign ".concat(JSON.stringify(signUrl)));
        case 26:
          opts.urlUploadFile = signUrl.data.uploadFileUrl;
          opts.urlUploadTorrent = signUrl.data.uploadTorrentUrl;
          metadata.filename = signUrl.data.filename;
          metadata.filePath = signUrl.data.filePath;
        case 30:
          _context21.next = 32;
          return Promise.all([uploadFile(input, opts, metadata), uploadFileTorrent(torrent, opts, metadata)]);
        case 32:
          _yield$Promise$all7 = _context21.sent;
          _yield$Promise$all8 = _slicedToArray(_yield$Promise$all7, 2);
          a = _yield$Promise$all8[0];
          b = _yield$Promise$all8[1];
          if (!(_typeof(a) !== 'object')) {
            _context21.next = 40;
            break;
          }
          throw new Error(JSON.stringify(a));
        case 40:
          if (!(_typeof(b) !== 'object')) {
            _context21.next = 42;
            break;
          }
          throw new Error(JSON.stringify(b));
        case 42:
          result = {
            file: "".concat(opts.ipfsGateway, "/").concat(cidFile),
            torrent: "".concat(opts.ipfsGateway, "/").concat(cidTorrent),
            filename: metadata.filename,
            filePath: metadata.filePath
          };
          if (metadata.method === 'ENCRYPT') {
            result.fileEncryptionKey = opts.key.fileEncryptionKey;
            result.encryptedKey = opts.key.encryptedKey;
            result.encryptedDataFile = input;
            result.iv = opts.key.iv;
            setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
              var c;
              return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                while (1) switch (_context20.prev = _context20.next) {
                  case 0:
                    _context20.next = 2;
                    return uploadKeyEncrypt(opts.key.encryptedKey, opts, metadata);
                  case 2:
                    c = _context20.sent;
                    if (!(c.msg !== 'success')) {
                      _context20.next = 5;
                      break;
                    }
                    throw new Error(JSON.stringify(c));
                  case 5:
                  case "end":
                    return _context20.stop();
                }
              }, _callee20);
            })), 2000);
          }
          return _context21.abrupt("return", result);
        case 45:
        case "end":
          return _context21.stop();
      }
    }, _callee21);
  }));
  return function _upload(_x29, _x30, _x31) {
    return _ref3.apply(this, arguments);
  };
}();
function _uploadFolder(_x32, _x33, _x34) {
  return _uploadFolder3.apply(this, arguments);
}
function _uploadFolder3() {
  _uploadFolder3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(input, opts, metadata) {
    var metadataFileList, optsList, torrentList, encryption, i, optsTemp, cidFile, torrent, cidTorrent, signUrlList, result, _i3, uploadKey;
    return _regeneratorRuntime().wrap(function _callee23$(_context23) {
      while (1) switch (_context23.prev = _context23.next) {
        case 0:
          metadataFileList = [];
          optsList = [];
          torrentList = [];
          encryption = false;
          i = 0;
        case 5:
          if (!(i < input.length)) {
            _context23.next = 25;
            break;
          }
          if (metadata.pathLists[i].method === 'ENCRYPT') encryption = true;
          optsTemp = _objectSpread({}, opts);
          _context23.next = 10;
          return hashIpfs(input[i]);
        case 10:
          cidFile = _context23.sent;
          optsTemp = _getOptsCreateTorrent(optsTemp);
          optsTemp.urlList = ["".concat(opts.ipfsGateway, "/").concat(cidFile)];
          _context23.next = 15;
          return createTorrentFile(input[i], optsTemp);
        case 15:
          torrent = _context23.sent;
          torrentList.push(torrent);
          _context23.next = 19;
          return hashIpfs(torrent);
        case 19:
          cidTorrent = _context23.sent;
          metadataFileList.push(_objectSpread(_objectSpread({}, metadata.pathLists[i]), {}, {
            cidFile: cidFile,
            cidTorrentFile: cidTorrent
          }));
          optsList.push(optsTemp);
        case 22:
          i++;
          _context23.next = 5;
          break;
        case 25:
          metadata.pathLists = metadataFileList;
          _context23.next = 28;
          return requestSignUrlList(opts, metadata);
        case 28:
          signUrlList = _context23.sent;
          if (!(signUrlList.status !== 200)) {
            _context23.next = 31;
            break;
          }
          throw new Error("error request sign ".concat(JSON.stringify(signUrlList)));
        case 31:
          signUrlList = signUrlList.data;
          optsList.forEach(function (_, idx, arr) {
            arr[idx].urlUploadFile = signUrlList[idx].uploadFileUrl;
            arr[idx].urlUploadTorrent = signUrlList[idx].uploadTorrentUrl;
            metadata.pathLists[idx].filename = signUrlList[idx].filename;
            metadata.pathLists[idx].filePath = signUrlList[idx].filePath;
          });
          _context23.next = 35;
          return Promise.all(input.map( /*#__PURE__*/function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(el, idx) {
              var _yield$Promise$all9, _yield$Promise$all10, a, b, fileResult;
              return _regeneratorRuntime().wrap(function _callee22$(_context22) {
                while (1) switch (_context22.prev = _context22.next) {
                  case 0:
                    _context22.next = 2;
                    return Promise.all([uploadFile(el, optsList[idx], metadata.pathLists[idx]), uploadFileTorrent(torrentList[idx], optsList[idx], metadata.pathLists[idx])]);
                  case 2:
                    _yield$Promise$all9 = _context22.sent;
                    _yield$Promise$all10 = _slicedToArray(_yield$Promise$all9, 2);
                    a = _yield$Promise$all10[0];
                    b = _yield$Promise$all10[1];
                    if (!(_typeof(a) !== 'object')) {
                      _context22.next = 10;
                      break;
                    }
                    throw new Error(JSON.stringify(a));
                  case 10:
                    if (!(_typeof(b) !== 'object')) {
                      _context22.next = 12;
                      break;
                    }
                    throw new Error(JSON.stringify(b));
                  case 12:
                    fileResult = {
                      file: "".concat(opts.ipfsGateway, "/").concat(metadata.pathLists[idx].cidFile),
                      torrent: "".concat(opts.ipfsGateway, "/").concat(metadata.pathLists[idx].cidTorrentFile),
                      filename: el.name,
                      filePath: metadataFileList[idx].filePath
                    };
                    return _context22.abrupt("return", fileResult);
                  case 14:
                  case "end":
                    return _context22.stop();
                }
              }, _callee22);
            }));
            return function (_x35, _x36) {
              return _ref5.apply(this, arguments);
            };
          }()));
        case 35:
          result = _context23.sent;
          if (!encryption) {
            _context23.next = 55;
            break;
          }
          _context23.next = 39;
          return new Promise(function (resolve) {
            return setTimeout(resolve, 5000);
          });
        case 39:
          _i3 = 0;
        case 40:
          if (!(_i3 < input.length)) {
            _context23.next = 55;
            break;
          }
          if (!(metadata.pathLists[_i3].method === 'ENCRYPT')) {
            _context23.next = 52;
            break;
          }
          result[_i3].fileEncryptionKey = optsList[_i3].key.fileEncryptionKey;
          result[_i3].encryptedKey = optsList[_i3].key.encryptedKey;
          result[_i3].encryptedDataFile = input[_i3];
          result[_i3].iv = opts.key.iv;
          metadata.pathLists[_i3].projectId = metadata.projectId;
          _context23.next = 49;
          return uploadKeyEncrypt(result[_i3].encryptedKey, optsList[_i3], metadata.pathLists[_i3]);
        case 49:
          uploadKey = _context23.sent;
          if (!(uploadKey.msg !== 'success')) {
            _context23.next = 52;
            break;
          }
          throw new Error(JSON.stringify(uploadKey));
        case 52:
          _i3++;
          _context23.next = 40;
          break;
        case 55:
          return _context23.abrupt("return", result);
        case 56:
        case "end":
          return _context23.stop();
      }
    }, _callee23);
  }));
  return _uploadFolder3.apply(this, arguments);
}
function _getOpts(opts) {
  if (opts.announce !== undefined) {
    opts.announce = opts.announce.concat(announceList);
  } else {
    opts.announce = announceList;
  }
  opts["private"] = true;
  return opts;
}
function _getOptsCreateTorrent(opts) {
  if (opts.announceList !== undefined) {
    opts.announceList = opts.announceList.concat(announceList);
  } else {
    opts.announceList = announceList;
  }
  opts["private"] = true;
  return opts;
}
module.exports = Eueno;